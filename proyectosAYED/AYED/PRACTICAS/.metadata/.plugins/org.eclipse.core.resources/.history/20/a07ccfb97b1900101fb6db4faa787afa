package EJER7;

import EJER1y2.BinaryTree;
import java.util.*;

public class ParcialArboles {
	private BinaryTree<Integer> unica;
	
	public int contarHijo(BinaryTree<Integer> arb) {
        int cant = 0;
        if(arb.hasLeftChild()) cant += contarHijo(arb.getLeftChild());
        if(arb.hasRightChild()) cant += contarHijo(arb.getRightChild());
        if( (arb.hasLeftChild() && !arb.hasRightChild()) || (!arb.hasLeftChild() && arb.hasRightChild())) cant++;
        return cant;
    }
	
	public boolean isLeftTree(BinaryTree<Integer> ab){
		  int ramaIzq = -1;
	      int ramaDer = -1;
	      if(ab.hasLeftChild()) ramaIzq = contarUnicoHijo(arb.getLeftChild());
	      if(ab.hasRightChild()) ramaDer = contarUnicoHijo(arb.getRightChild());
	      return ramaIzq > ramaDer;
	    }
	
	public BinaryTree<Integer> buscar (BinaryTree<Integer> unica, int num) {
		if(this.unica.getData()==num) return unica;
		 BinaryTree<Integer> res = new BinaryTree<Integer>();//"creo" un arbol desde el nodo que necesito == num
	    if(unica.hasLeftChild()) {
	       res = buscar(unica.getLeftChild(), num);
	    }
	    if((unica.hasRightChild()) && (res.isEmpty())) {
	       res = buscar(unica.getRightChild(), num);
	    }
	    return res;
	    }
	
	
	public boolean isLeftTree (int num) {
		BinaryTree<Integer> ab = buscar(unica,int); 
		return (!ab.isEmpty()? isLeftTree(ab): false);	
		}
	 public static void main (String[] args) { 
	        System.out.println("Test Ejercicio 7");
	        
	        BinaryTree<Integer> ab = new BinaryTree<Integer>(2);
	        ab.addLeftChild(new BinaryTree<Integer>(7));
	        ab.addRightChild(new BinaryTree<Integer>(-5));
	        ab.getLeftChild().addLeftChild(new BinaryTree<Integer>(23));
	        ab.getLeftChild().addRightChild(new BinaryTree<Integer>(6));
	        ab.getLeftChild().getLeftChild().addLeftChild(new BinaryTree<Integer>(-3));
	        ab.getLeftChild().getRightChild().addLeftChild(new BinaryTree<Integer>(55));
	        ab.getLeftChild().getRightChild().addRightChild(new BinaryTree<Integer>(11));
	        ab.getRightChild().addLeftChild(new BinaryTree<Integer>(19));
	        ab.getRightChild().getLeftChild().addRightChild(new BinaryTree<Integer>(4));
	        ab.getRightChild().getLeftChild().getRightChild().addLeftChild(new BinaryTree<Integer>(18));
	        ab.entreNiveles(0, 4);
	        
	        ParcialArboles parcialArb = new ParcialArboles(ab);
	        System.out.println("Resultado=" + parcialArb.isLeftTree(7));
	        System.out.println("Resultado=" + parcialArb.isLeftTree(2));
	        System.out.println("Resultado=" + parcialArb.isLeftTree(-5));
	        System.out.println("Resultado=" + parcialArb.isLeftTree(19));
	        System.out.println("Resultado=" + parcialArb.isLeftTree(-3));
	    }
	}